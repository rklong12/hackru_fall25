# tts.py
"""
Utilities for generating (and persisting) ElevenLabs voice IDs for your characters.

Highlights:
- Voice Design text meets min length (>=100 chars).
- Tries BOTH endpoints for Voice Design:
    /v1/text-to-voice/create-previews   (may return id via header or JSON)
    /v1/text-to-voice/design            (JSON previews)
- Create-voice payload uses voice_name / voice_description (and also name/description for compatibility).
- Fallback to an existing voice is opt-in (allow_fallback=False).
"""

import os
import json
from typing import Dict, List, Optional, Union
import requests
from dotenv import load_dotenv
from pathlib import Path

# --------------------------- Config ---------------------------

load_dotenv()
ELEVEN_API_KEY = os.getenv("ELEVEN_API_KEY")
ELEVEN_MODEL_ID = "eleven_v3"
BASE = "https://api.elevenlabs.io/v1"

class ElevenError(RuntimeError):
    pass

def _headers(json_content: bool = True) -> Dict[str, str]:
    if not ELEVEN_API_KEY:
        raise ElevenError("Missing ELEVEN_API_KEY. Set it in your .env.")
    h = {"xi-api-key": ELEVEN_API_KEY, "accept": "application/json"}
    if json_content:
        h["content-type"] = "application/json"
    return h


# ---------------------- ElevenLabs helpers --------------------
def _headers_for_tts():
    if not ELEVEN_API_KEY:
        raise ElevenError("Missing ELEVEN_API_KEY in environment (.env).")
    return {
        "xi-api-key": ELEVEN_API_KEY,
        "accept": "audio/mpeg",
        "content-type": "application/json",
    }

def _safe_filename(s: str) -> str:
    return "".join(c for c in s.lower().replace(" ", "-") if c.isalnum() or c in ("-", "_"))


def _hash_for(text: str, voice_id: str) -> str:
    return hashlib.sha256((voice_id + "||" + text).encode("utf-8")).hexdigest()[:12]

def _build_design_text(name: str, personality: str, background: str) -> str:
    persona = " ".join([s for s in (personality.strip(), background.strip()) if s]).strip()
    if not persona:
        persona = "Warm storyteller with steady pace and clear articulation."
    base = (
        f"My name is {name}. I speak as a {persona.lower()}. "
        f"I greet travelers, weigh my words, and keep my tone true to the moment, "
        f"letting breaths and subtle emphasis color what I say."
    )
    while len(base) < 120:
        base += " I choose words carefully and keep a measured rhythm."
    if len(base) > 240:
        base = base[:240].rstrip() + "."
    return base


def _design_voice_from_prompt(prompt: str, design_text: str) -> str:
    payload = {"text": design_text, "voice_description": prompt}

    # Try create-previews first
    url1 = f"{BASE}/text-to-voice/create-previews"
    r1 = requests.post(url1, headers=_headers(), json=payload, timeout=60)

    if r1.status_code == 200:
        gen_id = r1.headers.get("generated_voice_id")
        if gen_id:
            return gen_id
        try:
            data1 = r1.json()
            previews1 = data1.get("previews", [])
            if previews1 and "generated_voice_id" in previews1[0]:
                return previews1[0]["generated_voice_id"]
        except ValueError:
            pass

    # Fallback legacy endpoint
    url2 = f"{BASE}/text-to-voice/design"
    r2 = requests.post(url2, headers=_headers(), json=payload, timeout=60)
    if r2.status_code == 200:
        data2 = r2.json()
        previews2 = data2.get("previews", [])
        if previews2 and "generated_voice_id" in previews2[0]:
            return previews2[0]["generated_voice_id"]

    r1_text = getattr(r1, "text", "")
    r2_text = getattr(r2, "text", "")
    raise ElevenError(
        "Voice design failed. "
        f"create-previews: {r1.status_code} {r1_text[:200]} | "
        f"design: {r2.status_code} {r2_text[:200]}"
    )


def _create_voice_from_generated(generated_voice_id: str, name: str, description: str) -> str:
    """
    Finalizes a designed voice and returns a reusable voice_id.

    Some deployments expect 'voice_name'/'voice_description' (422 otherwise).
    We send both those AND 'name'/'description' for compatibility.
    """
    url = f"{BASE}/text-to-voice"
    payload = {
        "generated_voice_id": generated_voice_id,
        # Newer/strict keys:
        "voice_name": (name or "RPG Character")[:50],
        "voice_description": (description or "Generated by Voice Design")[:200],
        # Back-compat keys (harmless if ignored):
        "name": (name or "RPG Character")[:50],
        "description": (description or "Generated by Voice Design")[:200],
    }
    r = requests.post(url, headers=_headers(), json=payload, timeout=60)
    if r.status_code >= 400:
        raise ElevenError(f"Create voice failed: {r.status_code} {r.text}")
    data = r.json()
    voice_id = data.get("voice_id") or data.get("id")
    if not voice_id:
        raise ElevenError("Create voice response missing voice_id.")
    return voice_id


def _fallback_pick_existing_voice_id() -> Optional[str]:
    url = f"{BASE}/voices"
    r = requests.get(url, headers=_headers(json_content=False), timeout=30)
    if r.status_code >= 400:
        return None
    data = r.json()
    voices = data.get("voices", [])
    return voices[0].get("voice_id") if voices else None


def _list_voice_ids() -> List[str]:
    url = f"{BASE}/voices"
    r = requests.get(url, headers=_headers(json_content=False), timeout=30)
    r.raise_for_status()
    return [v.get("voice_id") for v in r.json().get("voices", [])]


# ---------------------- File & character IO -------------------

def _load_characters(path: str) -> List[Dict]:
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def _save_characters(path: str, characters: List[Dict]) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(characters, f, ensure_ascii=False, indent=2)


def _find_character(characters: List[Dict], target: str) -> Dict:
    if isinstance(target, int):
        if target < 0 or target >= len(characters):
            raise IndexError(f"Character index out of range: {target}")
        return characters[target]
    for ch in characters:
        if ch.get("name") == target:
            return ch
    raise ValueError(f"Character named '{target}' not found in characters.json")


# ----------------------- Public entrypoint --------------------

def ensure_voice_id_for_character_in_file(
    target: str,
    characters_path: str = "characters.json",
    allow_fallback: bool = False,
) -> str:
    """
    Ensures the specified character has a 'voiceId' persisted in characters.json.

    - If present already, return it.
    - Else: Voice Design (long text) -> generated_voice_id -> create voice -> voice_id.
    - Fallback (optional): pick an existing library voice if generation fails.
    """
    characters = _load_characters(characters_path)
    character = _find_character(characters, target)

    if character.get("voiceId"):
        return character["voiceId"]

    name = character.get("name") or "Unnamed Character"
    personality = (character.get("personality") or "").strip()
    background = (character.get("background") or "").strip()

    traits = "; ".join([t for t in (personality, background) if t]) or "warm storyteller"
    prompt = f"Medieval fantasy NPC voice for '{name}'. Traits: {traits}."
    design_text = _build_design_text(name, personality, background)

    try:
        generated_id = _design_voice_from_prompt(prompt, design_text)
        voice_id = _create_voice_from_generated(
            generated_voice_id=generated_id,
            name=name,
            description=f"Auto-generated for {name}: {personality}"[:200],
        )
        source = "designed-new"
    except Exception as e:
        if not allow_fallback:
            raise
        voice_id = _fallback_pick_existing_voice_id()
        if not voice_id:
            raise ElevenError(f"Failed to generate and no fallback voice available: {e}") from e
        source = "fallback-existing"

    character["voiceId"] = voice_id
    _save_characters(characters_path, characters)
    print(f"[tts] voiceId for '{name}': {voice_id} ({source}, design_text_len={len(design_text)})")
    return voice_id

def synthesize_voice_mp3(
    text: str,
    character_target: str,
    characters_path: str = "characters.json",
    out_dir: str = "assets",
    model_id: str = "eleven_v3"  # v3 alpha
) -> str:
    """
    Ensures a voice for the character, generates a random directional line,
    and saves an MP3 using Eleven v3 alpha to audio_cache/.
    Returns: (mp3_path, text_used)
    """
    voice_id = ensure_voice_id_for_character_in_file(character_target, characters_path)

    #Path(out_dir).mkdir(parents=True, exist_ok=True)
    name_part = _safe_filename(str(character_target))
    hash_part = _hash_for(text, voice_id)
    out_path = Path(out_dir) / f"{name_part or 'character'}-{hash_part}.mp3"
    if out_path.exists():
        return str(out_path), text

    # 4) Call ElevenLabs TTS (v3 alpha model)
    url = f"{BASE}/text-to-speech/{voice_id}"
    payload = {
        "text": text,
        "model_id": model_id,
        # Optionally tune voice settings if supported:
        # "voice_settings": {"stability": 0.4, "similarity_boost": 0.75}
    }

    r = requests.post(url, headers=_headers_for_tts(), json=payload, timeout=120)
    if r.status_code >= 400:
        raise ElevenError(f"TTS failed: {r.status_code} {r.text}")

    out_path.write_bytes(r.content)
    return str(out_path)

def synthesize_line_mp3(character_target, text, characters_path="characters.json",
                        out_dir="assets", model_id="eleven_v3"):
    voice_id = ensure_voice_id_for_character_in_file(character_target, characters_path)
    out_dir_path = Path(out_dir)
    out_dir_path.mkdir(parents=True, exist_ok=True)

    import hashlib, requests, os
    h = hashlib.sha256((voice_id + "||" + text).encode()).hexdigest()[:12]
    safe = "".join(c for c in str(character_target).lower().replace(" ", "-") if c.isalnum() or c in "-_")
    out_path = out_dir_path / f"{safe}-{h}.mp3"
    if out_path.exists():
        return str(out_path)

    headers = {"xi-api-key": os.getenv("ELEVEN_API_KEY"),
               "accept": "audio/mpeg",
               "content-type": "application/json"}
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
    payload = {"text": text, "model_id": model_id}
    r = requests.post(url, headers=headers, json=payload, timeout=120)
    r.raise_for_status()
    out_path.write_bytes(r.content)
    return str(out_path)